<resources>
    <string name="app_name">Sky University Lesson2 Part1</string>
    <string name="user_name_here">User Name Here</string>
    <string name="yellow_star">Yellow Star</string>
    <string name="recipe_text"><![CDATA[<h2>Название рецепта</h2>
Now it is your turn to complete this exercise.
Add a ScrollView with a TextView showing information about yourself to the layout.
Style the TextView with NameStyle, and add additional styling to separate the scrollable text from the edges of the screen.
Add some spacing between the lines using the lineSpacingMultiplier property to the TextView.
<h2>Experiment</h2> with adding an ImageView above the TextView inside the ScrollView. When you run the app, this image, unlike the star, will scroll out of view as the text scrolls up.
Hint: You will need to wrap the two scrollable views into a LinearLayout inside the ScrollView. ScrollView > LinerLayout > ImageView + TextView
Below is a skeleton code version for this challenge.
The important thing to remember is that since ScrollView can only have one child, you have to wrap that ImageView and the TextView into a LinearLayout.
There is no solution code provided for this challenge, but the skeleton code below gives you the expected view hierarchy to use.
SKELETON code of view hierarchy:
<br />Check the steps
<br />below as you implement
<br />them to complete this exercise.
It is time to use the Worker you defined in the last exercise.
You will do this exercise it in two parts. In the first part, you ll add code to the DevByteApplication class to schedule your RefreshDataWork to run once a day. Then, in the second part, youll define constraints to prevent running work when there\'s no network or the device is low on battery.
1. Create a coroutine scope to use for your application:
Now it is your turn to complete this exercise.
Add a ScrollView with a TextView showing information about yourself to the layout.
Style the TextView with NameStyle, and add additional styling to separate the scrollable text from the edges of the screen.
Add some spacing between the lines using the lineSpacingMultiplier property to the TextView.
<h2>Experiment</h2> with adding an ImageView above the TextView inside the ScrollView. When you run the app, this image, unlike the star, will scroll out of view as the text scrolls up.
Hint: You will need to wrap the two scrollable views into a LinearLayout inside the ScrollView. ScrollView > LinerLayout > ImageView + TextView
Below is a skeleton code version for this challenge.
The important thing to remember is that since ScrollView can only have one child, you have to wrap that ImageView and the TextView into a LinearLayout.
There is no solution code provided for this challenge, but the skeleton code below gives you the expected view hierarchy to use.
SKELETON code of view hierarchy:
<br />Check the steps
<br />below as you implement
<br />them to complete this exercise.
It is time to use the Worker you defined in the last exercise.
You will do this exercise it in two parts. In the first part, you ll add code to the DevByteApplication class to schedule your RefreshDataWork to run once a day. Then, in the second part, youll define constraints to prevent running work when there\'s no network or the device is low on battery.
1. Create a coroutine scope to use for your application:
Now it is your turn to complete this exercise.
Add a ScrollView with a TextView showing information about yourself to the layout.
Style the TextView with NameStyle, and add additional styling to separate the scrollable text from the edges of the screen.
Add some spacing between the lines using the lineSpacingMultiplier property to the TextView.
<h2>Experiment</h2> with adding an ImageView above the TextView inside the ScrollView. When you run the app, this image, unlike the star, will scroll out of view as the text scrolls up.
Hint: You will need to wrap the two scrollable views into a LinearLayout inside the ScrollView. ScrollView > LinerLayout > ImageView + TextView
Below is a skeleton code version for this challenge.
The important thing to remember is that since ScrollView can only have one child, you have to wrap that ImageView and the TextView into a LinearLayout.
There is no solution code provided for this challenge, but the skeleton code below gives you the expected view hierarchy to use.
SKELETON code of view hierarchy:
<br />Check the steps
<br />below as you implement
<br />them to complete this exercise.
It is time to use the Worker you defined in the last exercise.
You will do this exercise it in two parts. In the first part, you ll add code to the DevByteApplication class to schedule your RefreshDataWork to run once a day. Then, in the second part, youll define constraints to prevent running work when there\'s no network or the device is low on battery.
1. Create a coroutine scope to use for your application:
]]>
    </string>
    <string name="recipe_notes_hint">Write some notes here</string>
    <string name="recipe_notes_content_description">Write some notes here for the recipe</string>
    <string name="done">Done</string>

</resources>
